// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exchange.proto

/*
Package BrokerExcangeInterface is a generated protocol buffer package.

It is generated from these files:
	exchange.proto

It has these top-level messages:
	TransactionRequestType
	OHLCV
	StatisticsType
	Broker
	Status
*/
package BrokerExcangeInterface

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TransactionRequestType struct {
	OrderID         int32   `protobuf:"varint,1,opt,name=OrderID" json:"OrderID,omitempty"`
	BrokerID        int32   `protobuf:"varint,2,opt,name=BrokerID" json:"BrokerID,omitempty"`
	ClientID        int32   `protobuf:"varint,3,opt,name=ClientID" json:"ClientID,omitempty"`
	Ticker          string  `protobuf:"bytes,4,opt,name=Ticker" json:"Ticker,omitempty"`
	Amount          int32   `protobuf:"varint,5,opt,name=Amount" json:"Amount,omitempty"`
	Partial         bool    `protobuf:"varint,6,opt,name=Partial" json:"Partial,omitempty"`
	Time            int32   `protobuf:"varint,7,opt,name=Time" json:"Time,omitempty"`
	Price           float32 `protobuf:"fixed32,8,opt,name=Price" json:"Price,omitempty"`
	TransactionType string  `protobuf:"bytes,9,opt,name=TransactionType" json:"TransactionType,omitempty"`
	Action          string  `protobuf:"bytes,10,opt,name=Action" json:"Action,omitempty"`
	Status          int32   `protobuf:"varint,11,opt,name=Status" json:"Status,omitempty"`
}

func (m *TransactionRequestType) Reset()                    { *m = TransactionRequestType{} }
func (m *TransactionRequestType) String() string            { return proto.CompactTextString(m) }
func (*TransactionRequestType) ProtoMessage()               {}
func (*TransactionRequestType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TransactionRequestType) GetOrderID() int32 {
	if m != nil {
		return m.OrderID
	}
	return 0
}

func (m *TransactionRequestType) GetBrokerID() int32 {
	if m != nil {
		return m.BrokerID
	}
	return 0
}

func (m *TransactionRequestType) GetClientID() int32 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

func (m *TransactionRequestType) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *TransactionRequestType) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionRequestType) GetPartial() bool {
	if m != nil {
		return m.Partial
	}
	return false
}

func (m *TransactionRequestType) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TransactionRequestType) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TransactionRequestType) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

func (m *TransactionRequestType) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *TransactionRequestType) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type OHLCV struct {
	ID       int64   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Time     int32   `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty"`
	Interval int32   `protobuf:"varint,3,opt,name=Interval" json:"Interval,omitempty"`
	Open     float32 `protobuf:"fixed32,4,opt,name=Open" json:"Open,omitempty"`
	High     float32 `protobuf:"fixed32,5,opt,name=High" json:"High,omitempty"`
	Low      float32 `protobuf:"fixed32,6,opt,name=Low" json:"Low,omitempty"`
	Close    float32 `protobuf:"fixed32,7,opt,name=Close" json:"Close,omitempty"`
	Ticker   string  `protobuf:"bytes,8,opt,name=Ticker" json:"Ticker,omitempty"`
}

func (m *OHLCV) Reset()                    { *m = OHLCV{} }
func (m *OHLCV) String() string            { return proto.CompactTextString(m) }
func (*OHLCV) ProtoMessage()               {}
func (*OHLCV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OHLCV) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OHLCV) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *OHLCV) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *OHLCV) GetOpen() float32 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *OHLCV) GetHigh() float32 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *OHLCV) GetLow() float32 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *OHLCV) GetClose() float32 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *OHLCV) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

type StatisticsType struct {
	Ticker map[string]*OHLCV `protobuf:"bytes,1,rep,name=Ticker" json:"Ticker,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StatisticsType) Reset()                    { *m = StatisticsType{} }
func (m *StatisticsType) String() string            { return proto.CompactTextString(m) }
func (*StatisticsType) ProtoMessage()               {}
func (*StatisticsType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatisticsType) GetTicker() map[string]*OHLCV {
	if m != nil {
		return m.Ticker
	}
	return nil
}

type Broker struct {
	BrokerID int32 `protobuf:"varint,1,opt,name=BrokerID" json:"BrokerID,omitempty"`
}

func (m *Broker) Reset()                    { *m = Broker{} }
func (m *Broker) String() string            { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()               {}
func (*Broker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Broker) GetBrokerID() int32 {
	if m != nil {
		return m.BrokerID
	}
	return 0
}

type Status struct {
	Status int32 `protobuf:"varint,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Status) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*TransactionRequestType)(nil), "BrokerExcangeInterface.TransactionRequestType")
	proto.RegisterType((*OHLCV)(nil), "BrokerExcangeInterface.OHLCV")
	proto.RegisterType((*StatisticsType)(nil), "BrokerExcangeInterface.StatisticsType")
	proto.RegisterType((*Broker)(nil), "BrokerExcangeInterface.Broker")
	proto.RegisterType((*Status)(nil), "BrokerExcangeInterface.Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BrokerExcangeInterface service

type BrokerExcangeInterfaceClient interface {
	// A client-to-server streaming RPC.
	// New transaction requests from clients
	// should be sent to exchange by broker through this channel
	SendTransactionRequestStream(ctx context.Context, opts ...grpc.CallOption) (BrokerExcangeInterface_SendTransactionRequestStreamClient, error)
	// A server-to-client streaming RPC.
	// Transaction results from the exchange
	// should be sent back to clients through this channel
	GetTransactionResultStream(ctx context.Context, in *Broker, opts ...grpc.CallOption) (BrokerExcangeInterface_GetTransactionResultStreamClient, error)
	// A server-to-client streaming RPC.
	// Send statistics to brocker evry second
	// To get statistics send BrockerID
	GetStatistics(ctx context.Context, in *Broker, opts ...grpc.CallOption) (BrokerExcangeInterface_GetStatisticsClient, error)
}

type brokerExcangeInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewBrokerExcangeInterfaceClient(cc *grpc.ClientConn) BrokerExcangeInterfaceClient {
	return &brokerExcangeInterfaceClient{cc}
}

func (c *brokerExcangeInterfaceClient) SendTransactionRequestStream(ctx context.Context, opts ...grpc.CallOption) (BrokerExcangeInterface_SendTransactionRequestStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BrokerExcangeInterface_serviceDesc.Streams[0], c.cc, "/BrokerExcangeInterface.BrokerExcangeInterface/SendTransactionRequestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerExcangeInterfaceSendTransactionRequestStreamClient{stream}
	return x, nil
}

type BrokerExcangeInterface_SendTransactionRequestStreamClient interface {
	Send(*TransactionRequestType) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type brokerExcangeInterfaceSendTransactionRequestStreamClient struct {
	grpc.ClientStream
}

func (x *brokerExcangeInterfaceSendTransactionRequestStreamClient) Send(m *TransactionRequestType) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerExcangeInterfaceSendTransactionRequestStreamClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerExcangeInterfaceClient) GetTransactionResultStream(ctx context.Context, in *Broker, opts ...grpc.CallOption) (BrokerExcangeInterface_GetTransactionResultStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BrokerExcangeInterface_serviceDesc.Streams[1], c.cc, "/BrokerExcangeInterface.BrokerExcangeInterface/GetTransactionResultStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerExcangeInterfaceGetTransactionResultStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BrokerExcangeInterface_GetTransactionResultStreamClient interface {
	Recv() (*TransactionRequestType, error)
	grpc.ClientStream
}

type brokerExcangeInterfaceGetTransactionResultStreamClient struct {
	grpc.ClientStream
}

func (x *brokerExcangeInterfaceGetTransactionResultStreamClient) Recv() (*TransactionRequestType, error) {
	m := new(TransactionRequestType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerExcangeInterfaceClient) GetStatistics(ctx context.Context, in *Broker, opts ...grpc.CallOption) (BrokerExcangeInterface_GetStatisticsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BrokerExcangeInterface_serviceDesc.Streams[2], c.cc, "/BrokerExcangeInterface.BrokerExcangeInterface/GetStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerExcangeInterfaceGetStatisticsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BrokerExcangeInterface_GetStatisticsClient interface {
	Recv() (*StatisticsType, error)
	grpc.ClientStream
}

type brokerExcangeInterfaceGetStatisticsClient struct {
	grpc.ClientStream
}

func (x *brokerExcangeInterfaceGetStatisticsClient) Recv() (*StatisticsType, error) {
	m := new(StatisticsType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BrokerExcangeInterface service

type BrokerExcangeInterfaceServer interface {
	// A client-to-server streaming RPC.
	// New transaction requests from clients
	// should be sent to exchange by broker through this channel
	SendTransactionRequestStream(BrokerExcangeInterface_SendTransactionRequestStreamServer) error
	// A server-to-client streaming RPC.
	// Transaction results from the exchange
	// should be sent back to clients through this channel
	GetTransactionResultStream(*Broker, BrokerExcangeInterface_GetTransactionResultStreamServer) error
	// A server-to-client streaming RPC.
	// Send statistics to brocker evry second
	// To get statistics send BrockerID
	GetStatistics(*Broker, BrokerExcangeInterface_GetStatisticsServer) error
}

func RegisterBrokerExcangeInterfaceServer(s *grpc.Server, srv BrokerExcangeInterfaceServer) {
	s.RegisterService(&_BrokerExcangeInterface_serviceDesc, srv)
}

func _BrokerExcangeInterface_SendTransactionRequestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerExcangeInterfaceServer).SendTransactionRequestStream(&brokerExcangeInterfaceSendTransactionRequestStreamServer{stream})
}

type BrokerExcangeInterface_SendTransactionRequestStreamServer interface {
	SendAndClose(*Status) error
	Recv() (*TransactionRequestType, error)
	grpc.ServerStream
}

type brokerExcangeInterfaceSendTransactionRequestStreamServer struct {
	grpc.ServerStream
}

func (x *brokerExcangeInterfaceSendTransactionRequestStreamServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerExcangeInterfaceSendTransactionRequestStreamServer) Recv() (*TransactionRequestType, error) {
	m := new(TransactionRequestType)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BrokerExcangeInterface_GetTransactionResultStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Broker)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerExcangeInterfaceServer).GetTransactionResultStream(m, &brokerExcangeInterfaceGetTransactionResultStreamServer{stream})
}

type BrokerExcangeInterface_GetTransactionResultStreamServer interface {
	Send(*TransactionRequestType) error
	grpc.ServerStream
}

type brokerExcangeInterfaceGetTransactionResultStreamServer struct {
	grpc.ServerStream
}

func (x *brokerExcangeInterfaceGetTransactionResultStreamServer) Send(m *TransactionRequestType) error {
	return x.ServerStream.SendMsg(m)
}

func _BrokerExcangeInterface_GetStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Broker)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerExcangeInterfaceServer).GetStatistics(m, &brokerExcangeInterfaceGetStatisticsServer{stream})
}

type BrokerExcangeInterface_GetStatisticsServer interface {
	Send(*StatisticsType) error
	grpc.ServerStream
}

type brokerExcangeInterfaceGetStatisticsServer struct {
	grpc.ServerStream
}

func (x *brokerExcangeInterfaceGetStatisticsServer) Send(m *StatisticsType) error {
	return x.ServerStream.SendMsg(m)
}

var _BrokerExcangeInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BrokerExcangeInterface.BrokerExcangeInterface",
	HandlerType: (*BrokerExcangeInterfaceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTransactionRequestStream",
			Handler:       _BrokerExcangeInterface_SendTransactionRequestStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTransactionResultStream",
			Handler:       _BrokerExcangeInterface_GetTransactionResultStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStatistics",
			Handler:       _BrokerExcangeInterface_GetStatistics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exchange.proto",
}

func init() { proto.RegisterFile("exchange.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5f, 0x6f, 0xd3, 0x30,
	0x10, 0x9f, 0xdd, 0xb5, 0x6b, 0xaf, 0xa2, 0x20, 0x0b, 0x55, 0x56, 0x04, 0x28, 0x8a, 0x10, 0xca,
	0x53, 0x84, 0xba, 0x17, 0xc4, 0x1b, 0xb4, 0xd3, 0x16, 0x34, 0xa9, 0x93, 0x5b, 0x21, 0x24, 0x9e,
	0x4c, 0x76, 0x6c, 0x51, 0xd3, 0xa4, 0x38, 0xce, 0x58, 0x3f, 0x15, 0x6f, 0x88, 0xef, 0xc2, 0x97,
	0x41, 0xb6, 0x9b, 0x92, 0xc2, 0xca, 0x9f, 0xb7, 0xfb, 0x9d, 0xcf, 0x77, 0xbf, 0xfb, 0xdd, 0xd9,
	0x30, 0xc0, 0xdb, 0xe4, 0x5a, 0xe6, 0x57, 0x18, 0xad, 0x54, 0xa1, 0x0b, 0x36, 0x7c, 0xad, 0x8a,
	0x05, 0xaa, 0x93, 0xdb, 0xc4, 0x38, 0xe3, 0x5c, 0xa3, 0xfa, 0x28, 0x13, 0x0c, 0xbe, 0x51, 0x18,
	0xce, 0x95, 0xcc, 0x4b, 0x99, 0xe8, 0xb4, 0xc8, 0x05, 0x7e, 0xaa, 0xb0, 0xd4, 0xf3, 0xf5, 0x0a,
	0x19, 0x87, 0xa3, 0xa9, 0xba, 0x44, 0x15, 0x4f, 0x38, 0xf1, 0x49, 0xd8, 0x16, 0x35, 0x64, 0x1e,
	0x74, 0x5d, 0xba, 0x78, 0xc2, 0xa9, 0x3d, 0xda, 0x62, 0x73, 0x36, 0xce, 0x52, 0xcc, 0x75, 0x3c,
	0xe1, 0x2d, 0x77, 0x56, 0x63, 0x36, 0x84, 0xce, 0x3c, 0x4d, 0x16, 0xa8, 0xf8, 0xa1, 0x4f, 0xc2,
	0x9e, 0xd8, 0x20, 0xe3, 0x7f, 0xb5, 0x2c, 0xaa, 0x5c, 0xf3, 0xb6, 0xbd, 0xb1, 0x41, 0x86, 0xc1,
	0x85, 0x54, 0x3a, 0x95, 0x19, 0xef, 0xf8, 0x24, 0xec, 0x8a, 0x1a, 0x32, 0x06, 0x87, 0xf3, 0x74,
	0x89, 0xfc, 0xc8, 0xc6, 0x5b, 0x9b, 0x3d, 0x84, 0xf6, 0x85, 0x4a, 0x13, 0xe4, 0x5d, 0x9f, 0x84,
	0x54, 0x38, 0xc0, 0x42, 0xb8, 0xdf, 0xe8, 0xcf, 0x34, 0xc6, 0x7b, 0xb6, 0xf8, 0xaf, 0x6e, 0xcb,
	0xc2, 0x22, 0x0e, 0x8e, 0x9d, 0x43, 0xc6, 0x3f, 0xd3, 0x52, 0x57, 0x25, 0xef, 0x3b, 0x76, 0x0e,
	0x05, 0x5f, 0x08, 0xb4, 0xa7, 0x67, 0xe7, 0xe3, 0xb7, 0x6c, 0x00, 0x74, 0x23, 0x52, 0x4b, 0xd0,
	0x78, 0xb2, 0x65, 0x47, 0x1b, 0xec, 0x3c, 0xe8, 0x5a, 0xd5, 0x6f, 0x64, 0x56, 0xeb, 0x52, 0x63,
	0x13, 0x3f, 0x5d, 0x61, 0x6e, 0x55, 0xa1, 0xc2, 0xda, 0xc6, 0x77, 0x96, 0x5e, 0x5d, 0x5b, 0x45,
	0xa8, 0xb0, 0x36, 0x7b, 0x00, 0xad, 0xf3, 0xe2, 0xb3, 0xd5, 0x82, 0x0a, 0x63, 0x9a, 0x9e, 0xc7,
	0x59, 0x51, 0x3a, 0x21, 0xa8, 0x70, 0xa0, 0xa1, 0x73, 0xb7, 0xa9, 0x73, 0xf0, 0x95, 0xc0, 0xc0,
	0x90, 0x4f, 0x4b, 0x9d, 0x26, 0xa5, 0x6d, 0xfa, 0xcd, 0x36, 0x94, 0xf8, 0xad, 0xb0, 0x3f, 0x1a,
	0x45, 0x77, 0x2f, 0x4a, 0xb4, 0x7b, 0x2f, 0x72, 0x97, 0x4e, 0x72, 0xad, 0xd6, 0x75, 0x7a, 0xef,
	0x1d, 0xf4, 0x1b, 0x6e, 0xc3, 0x76, 0x81, 0x6b, 0x2b, 0x4b, 0x4f, 0x18, 0x93, 0x1d, 0x43, 0xfb,
	0x46, 0x66, 0x95, 0x13, 0xa6, 0x3f, 0x7a, 0xbc, 0xaf, 0x96, 0x55, 0x55, 0xb8, 0xd8, 0x97, 0xf4,
	0x05, 0x09, 0x9e, 0x42, 0xc7, 0x85, 0xee, 0xac, 0x1e, 0xd9, 0x5d, 0xbd, 0xc0, 0xaf, 0x07, 0xd5,
	0x18, 0x19, 0x69, 0x8e, 0x6c, 0xf4, 0x9d, 0xc2, 0x9e, 0x87, 0xc0, 0x14, 0x3c, 0x9a, 0x61, 0x7e,
	0xf9, 0xfb, 0x5b, 0x98, 0x69, 0x85, 0x72, 0xc9, 0xa2, 0x7d, 0x64, 0xef, 0x7e, 0x3d, 0xde, 0x93,
	0x3f, 0x09, 0x59, 0x95, 0xc1, 0x41, 0x48, 0xd8, 0x0a, 0xbc, 0x53, 0xd4, 0x3b, 0x09, 0xca, 0x2a,
	0xab, 0x2b, 0xee, 0xcd, 0xe0, 0xdc, 0xde, 0x7f, 0x32, 0x0a, 0x0e, 0x9e, 0x13, 0xf6, 0x1e, 0xee,
	0x9d, 0xa2, 0xfe, 0x39, 0xcb, 0xbf, 0x16, 0x79, 0xf6, 0x6f, 0xfb, 0x60, 0x92, 0x7f, 0xe8, 0xd8,
	0xaf, 0xe6, 0xf8, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x4d, 0x92, 0x86, 0x7c, 0x04, 0x00,
	0x00,
}
